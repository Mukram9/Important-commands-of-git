kubernetes installation:- apt-get update && apt-get install -y apt-transport-https
    5  sudo apt update
    6  sudo apt -y install curl apt-transport-https
    7  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    8  echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    9  apt-get install docker.io -y
   10  sudo apt update
   11  apt-get install -y kubelet kubeadm kubectl kubernetes-cni

cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

systemctl daemon-reload
systemctl restart docker
kubeadm init
########## to start Kubernetes Cluster use this as Normal user##########
mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
################################
if you are loging as root user run below command

export KUBECONFIG=/etc/kubernetes/admin.conf


on browser copy below url
https://kubernetes.io/docs/concepts/cluster-administration/addons/

goto master and run below command
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

kubectl get nodes

if you see error like this

# kubectl get node
The connection to the server 172.31.12.142:6443 was refused - did you specify the right host or port?

Again run 
export KUBECONFIG=/etc/kubernetes/admin.conf



------------------------------------------------------------------------------------------------------------------------------------------

Viewing and finding resources:- 


List all services in the namespace
    #kubectl get services 

List all pods in all namespaces
    #kubectl get pods --all-namespaces

List all pods in the current namespace, with more details
    #kubectl get pods -o wide 

List a particular deployment
    #kubectl get deployment my-dep

List a particular deployment
    #kubectl get deployment my-dep

List all pods in the namespace
    #kubectl get pods

Get a pod's YAML
    #kubectl get pod my-pod -o yaml

 List Services Sorted by Name
    kubectl get services --sort-by=.metadata.name

List pods Sorted by Restart Count
    #kubectl get pods --sort-by='.status.containerStatuses[0].restartCount'

List PersistentVolumes sorted by capacity
    #kubectl get pv --sort-by=.spec.capacity.storage

Get all running pods in the namespace
    #kubectl get pods --field-selector=status.phase=Running

Get ExternalIPs of all nodes
    #kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'

Show labels for all pods (or any other Kubernetes object that supports labelling)
    #kubectl get pods --show-labels

List all warning events
    #kubectl events --types=Warning

List all supported resource types along with their shortnames, API group, whether they are namespaced, and kind:
    
#kubectl api-resources

Get a deployment's status subresource
    #kubectl get deployment nginx-deployment --subresource=status

Rolling update "www" containers of "frontend" deployment, updating the image
    #kubectl set image deployment/frontend www=image:v2

Check the history of deployments including the revision
    #kubectl rollout history deployment/frontend

Rollback to the previous deployment
    #kubectl rollout undo deployment/frontend

Rollback to a specific revision
    #kubectl rollout undo deployment/frontend --to-revision=2  

Watch rolling update status of "frontend" deployment until completion
    #kubectl rollout status -w deployment/frontend 

 Rolling restart of the "frontend" deployment
    #kubectl rollout restart deployment/frontend
----------------------------------------------------------------------------------------------------------

Updating resources

kubectl set image deployment/frontend www=image:v2               # Rolling update "www" containers of "frontend" deployment, updating the image
kubectl rollout history deployment/frontend                      # Check the history of deployments including the revision
kubectl rollout undo deployment/frontend                         # Rollback to the previous deployment
kubectl rollout undo deployment/frontend --to-revision=2         # Rollback to a specific revision
kubectl rollout status -w deployment/frontend                    # Watch rolling update status of "frontend" deployment until completion
kubectl rollout restart deployment/frontend                      # Rolling restart of the "frontend" deployment


cat pod.json | kubectl replace -f -                              # Replace a pod based on the JSON passed into stdin

# Force replace, delete and then re-create the resource. Will cause a service outage.
kubectl replace --force -f ./pod.json

# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000
kubectl expose rc nginx --port=80 --target-port=8000

# Update a single-container pod's image version (tag) to v4
kubectl get pod mypod -o yaml | sed 's/\(image: myimage\):.*$/\1:v4/' | kubectl replace -f -

kubectl label pods my-pod new-label=awesome                      # Add a Label
kubectl label pods my-pod new-label-                             # Remove a label
kubectl label pods my-pod new-label=new-value --overwrite        # Overwrite an existing value
kubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       # Add an annotation
kubectl annotate pods my-pod icon-                               # Remove annotation
kubectl autoscale deployment foo --min=2 --max=10                # Auto scale a deployment "foo"
-------------------------------------------------------------------------------------------------------------
Scaling resources 

kubectl scale --replicas=3 rs/foo                                 # Scale a replicaset named 'foo' to 3
kubectl scale --replicas=3 -f foo.yaml                            # Scale a resource specified in "foo.yaml" to 3
kubectl scale --current-replicas=2 --replicas=3 deployment/mysql  # If the deployment named mysql's current size is 2, scale mysql to 3
kubectl scale --replicas=5 rc/foo rc/bar rc/baz                   # Scale multiple replication controllers

---------------------------------------------------------------------------------------------------------------------
Deleting resources

kubectl delete -f ./pod.json                                      # Delete a pod using the type and name specified in pod.json
kubectl delete pod unwanted --now                                 # Delete a pod with no grace period
kubectl delete pod,service baz foo                                # Delete pods and services with same names "baz" and "foo"
kubectl delete pods,services -l name=myLabel                      # Delete pods and services with label name=myLabel
kubectl -n my-ns delete pod,svc --all                             # Delete all pods and services in namespace my-ns,
# Delete all pods matching the awk pattern1 or pattern2
kubectl get pods  -n mynamespace --no-headers=true | awk '/pattern1|pattern2/{print $1}' | xargs  kubectl delete -n mynamespace pod


----------------------------------------------------------------------------------------------------------------------
Copying files and directories to and from containers

kubectl cp /tmp/foo_dir my-pod:/tmp/bar_dir            # Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the current namespace
kubectl cp /tmp/foo my-pod:/tmp/bar -c my-container    # Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container
kubectl cp /tmp/foo my-namespace/my-pod:/tmp/bar       # Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace my-namespace
kubectl cp my-namespace/my-pod:/tmp/foo /tmp/bar       # Copy /tmp/foo from a remote pod to /tmp/bar locally

----------------------------------------------------------------------------------------------------------------------
Interacting with Deployments and Services

kubectl logs deploy/my-deployment                         # dump Pod logs for a Deployment (single-container case)
kubectl logs deploy/my-deployment -c my-container         # dump Pod logs for a Deployment (multi-container case)

kubectl port-forward svc/my-service 5000                  # listen on local port 5000 and forward to port 5000 on Service backend
kubectl port-forward svc/my-service 5000:my-service-port  # listen on local port 5000 and forward to Service target port with name <my-service-port>

kubectl port-forward deploy/my-deployment 5000:6000       # listen on local port 5000 and forward to port 6000 on a Pod created by <my-deployment>
kubectl exec deploy/my-deployment -- ls                   # run command in first Pod and first container in Deployment (single- or multi-container cases)

-------------------------------------------------------------------------------------------------------------------------------------------------------
Interacting with Nodes and cluster

kubectl cordon my-node                                                # Mark my-node as unschedulable
kubectl drain my-node                                                 # Drain my-node in preparation for maintenance
kubectl uncordon my-node                                              # Mark my-node as schedulable
kubectl top node my-node                                              # Show metrics for a given node
kubectl cluster-info                                                  # Display addresses of the master and services
kubectl cluster-info dump                                             # Dump current cluster state to stdout
kubectl cluster-info dump --output-directory=/path/to/cluster-state   # Dump current cluster state to /path/to/cluster-state

# View existing taints on which exist on current nodes.
kubectl get nodes -o='custom-columns=NodeName:.metadata.name,TaintKey:.spec.taints[*].key,TaintValue:.spec.taints[*].value,TaintEffect:.spec.taints[*].effect'

# If a taint with that key and effect already exists, its value is replaced as specified.
kubectl taint nodes foo dedicated=special-user:NoSchedule



-------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

# Describe commands with verbose output
kubectl describe nodes my-node
kubectl describe pods my-pod
--------------------------------------------------------------------


